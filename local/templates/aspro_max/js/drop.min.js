class DropZone{constructor(selector,option={}){this.setOption(option),this.el=document.querySelector(selector),this.inputFiles=this.el.querySelector('input[type="file"]'),this.wrapper=this.el.querySelector(this.option.wrapperSelector),this.init()}init=()=>{this.dt=new DataTransfer,this.bindEvents(),this.insertTextNode()};setOption=option=>{const optionDefault={wrapperSelector:".drop-zone__wrapper",className:{wrapperText:"drop-zone__wrapper-text",images:"drop-zone__images",image:"drop-zone__image",imageClose:"drop-zone__image-close",imagesIcon:"drop-zone__image-icon",checkboxInput:"drop_zone__images-input"},text:BX.message("DROP_FILE")};this.option=this.deepMerge({},optionDefault,option)};deepMerge=(target,...objects)=>{for(let obj of objects){const props=Object.getOwnPropertyNames(obj);for(let prop of props){let value=obj[prop];value&&"object"==typeof value?(target[prop]=target[prop]||{},this.deepMerge(target[prop],value)):target[prop]=value}}return target};insertTextNode=()=>{const $block=BX.create("div",{attrs:{className:this.option.className.wrapperText},html:this.option.text});this.wrapper.appendChild($block)};bindEvents=()=>{this.inputFiles.addEventListener("change",e=>this.addFileFromFileList(e.target.files)),this.el.addEventListener("click",e=>{if(e.target.closest("."+this.option.className.imageClose)){this.removeFileFromFileList(e.target.closest("."+this.option.className.image).dataset.name);const delImage=e.target.closest("."+this.option.className.image).getAttribute("for");delImage&&this.el.querySelector("input#"+delImage)&&(this.el.querySelector("input#"+delImage).checked=!0),e.target.closest("."+this.option.className.image).remove(),null==this.el.querySelector("img")&&this.el.getElementsByClassName(this.option.className.images)[0].remove()}}),this.el.addEventListener("drop",e=>{e.preventDefault();let arrFile=[];arrFile=e.dataTransfer.files,this.addFileFromFileList(arrFile),this.el.classList.remove("dragover")}),this.el.addEventListener("dragover",e=>e.preventDefault()),this.el.addEventListener("dragleave",e=>this.el.classList.remove("dragover")),this.el.addEventListener("dragenter",e=>this.el.classList.add("dragover"))};addFileFromFileList=arrFile=>{for(let i=0;i<arrFile.length;i++)this.dt.items.add(arrFile[i]);this.inputFiles.files=this.dt.files,this.appendImagesBlock();for(var i=0;i<arrFile.length;++i){const reader=new FileReader;reader.readAsDataURL(arrFile[i]),reader.name=arrFile[i].name,reader.onloadend=e=>{this.appendImageBlock(e)}}};appendImagesBlock=()=>{if(!this.el.getElementsByClassName(this.option.className.images)[0]){const $blockWrapper=BX.create("div",{attrs:{className:this.option.className.images}});this.el.insertBefore($blockWrapper,this.wrapper)}};appendImageBlock=object=>{let name,src,alt,title,delImg,$input;"progressevent"===typeofExt(object)?(name=alt=title=object.target.name,src=object.target.result):(name=alt=title=object.getAttribute("alt"),src=object.getAttribute("src"),delImg=object.dataset.id,$input=BX.create("input",{attrs:{type:"checkbox",name:"deleted_images[]",value:object.dataset.id,id:"del-image-"+object.dataset.id,className:this.option.className.checkboxInput}}));const $block=BX.create("label",{attrs:{className:this.option.className.image+" bordered rounded3",for:"del-image-"+delImg},dataset:{name:name},children:[BX.create("span",{attrs:{className:this.option.className.imageClose,title:BX.message("BPC_MES_DELETE")},children:[BX.create("span",{attrs:{className:this.option.className.imagesIcon+" rounded3"}})]}),BX.create("img",{attrs:{src:src,alt:alt,title:title}})]});$input&&this.el.appendChild($input),this.el.getElementsByClassName(this.option.className.images)[0].appendChild($block)};removeFileFromFileList=fileName=>{if(fileName){for(let i=0;i<this.dt.files.length;i++)if(this.dt.files[i].name==fileName){this.dt.items.remove(i);break}this.inputFiles.files=this.dt.files}};drawImagesFromColection=$images=>{if($images.length){this.appendImagesBlock();for(let i=0;i<$images.length;i++)this.appendImageBlock($images[i])}}}